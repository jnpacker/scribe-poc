apiVersion: v1
data:
  transfer.sh: "#!/bin/bash\nif [[ $(kubectl get pvc $PVC_NAME) ]]; then\n    \texit
    0\nelif [[ $(kubectl get replicationdestination $DESTINATION | grep -v NAME |
    awk '{print $1}') == $DESTINATION ]]; then\n\tuntil kubectl get volumesnapshots
    --template {{.status.readyToUse}} `kubectl get replicationdestination $DESTINATION
    --template={{.status.latestImage.name}}`; do echo \"waiting for snapshot to be
    ready\"; sleep 1; done\n\tcat <<EOF | kubectl create -f - \n        apiVersion:
    v1\n        kind: PersistentVolumeClaim\n        metadata:\n          name: $PVC_NAME\n
    \       spec:\n          accessModes:\n            - ReadWriteOnce\n          dataSource:\n
    \           kind: VolumeSnapshot\n            apiGroup: snapshot.storage.k8s.io\n
    \           name: `kubectl get replicationdestination $DESTINATION --template={{.status.latestImage.name}}`\n
    \         resources:\n            requests:\n              storage: `kubectl get
    replicationdestination $DESTINATION --template={{.spec.rsync.capacity}}` \nEOF\nelse\n\tcat
    <<EOF | kubectl create -f - \n        apiVersion: v1\n        kind: PersistentVolumeClaim\n
    \       metadata:\n          name: $PVC_NAME\n        spec:\n          accessModes:\n
    \         - ReadWriteOnce\n          resources:\n           requests:\n             storage:
    $SIZE\nEOF\nfi\n"
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: transfer
